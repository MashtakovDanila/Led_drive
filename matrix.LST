C51 COMPILER V8.05a   MATRIX                                                               04/13/2022 11:01:28 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE MATRIX
OBJECT MODULE PLACED IN matrix.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE matrix.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <REGX52.H>
   2                  #include <stdio.H>
   3                  //#include <intrins.H>
   4          
   5                  sbit CS  = P1^0;
   6                  sbit SI  = P1^1;
   7                  sbit SCK = P1^2;
   8          
   9          //----------------------------------------------------------------------------------;
  10                          unsigned int count_timer1_interrupt;/* counrets */
  11                          unsigned char count_timer0_interrupt;/* counrets */
  12                          unsigned char clock_sec,clock_min,clock_chas;
  13          //----------------------------------------------------------------------------------;
  14                          void preset_T0isr (void){ // auto_reload,1sec/1024
  15   1                        TH0 = 0xA4; 
  16   1                        TL0 = 0xA4; 
  17   1                        TMOD |= 0x2;
  18   1                        TR0 = 1; 
  19   1                        ET0 = 1; 
  20   1                        EA = 1;
  21   1                              
  22   1      }
  23          //----------------------------------------------------------------------------------;           
  24          void preset_T1isr (void){ // auto_reload,1sec/1024
  25   1                        TH1 = 0xA4; 
  26   1                        TL1 = 0xA4; 
  27   1                        TMOD |= 0x22;
  28   1                        TR1 = 1; 
  29   1                        ET1 = 1; 
  30   1                        EA = 1;
  31   1      }               
  32          //----------------------------------------------------------------------------------;
  33                          //void delay(unsigned int val){
  34                          //   while(val != 0)val--; 
  35                          //}   
  36          //----------------------------------------------------------------------------------;   
  37                          
  38                          void shift_out8(unsigned char _data) {
  39   1                              char count_shift,SPI_time = 10;         
  40   1            for (count_shift = 0; count_shift < 8; count_shift++) {   
  41   2              //delay(SPI_time/2); 
  42   2               if (_data & 0x80) SI =1; else SI =0; 
  43   2                   _data<<=1;                                  
  44   2                   //delay(SPI_time/2); 
  45   2                   SCK = 1;          
  46   2                   //delay(SPI_time);   
  47   2                   SCK = 0;        
  48   2      //***********************************************************;          
  49   2                      /*      unsigned char count_shift;
  50   2                                      for ( count_shift = 0; count_shift < 8; count_shift++ ) {
  51   2                                                      SCK = 0;
  52   2                                                      delay(5);
  53   2                                                      _data = _crol_ ( _data, 1 );
  54   2                                                      SI = _data & 0x1;
  55   2                                                      delay(5);
C51 COMPILER V8.05a   MATRIX                                                               04/13/2022 11:01:28 PAGE 2   

  56   2                                                      SCK = 1;
  57   2                                                      delay(5); 
  58   2                                      }        */
  59   2      //***********************************************************;
  60   2                              }
  61   1                      }
  62                          
  63          //----------------------------------------------------------------------------------;
  64              unsigned char delenie (unsigned char val, unsigned char dec) {
  65   1               dec = val / 10; 
  66   1                  return dec; 
  67   1      }
  68          //----------------------------------------------------------------------------------; 
  69              unsigned char ostatok (unsigned char val, unsigned char ed) {
  70   1                      ed = val % 10;
  71   1                         return ed;
  72   1      }
  73          //----------------------------------------------------------------------------------; 
  74                    void print_LED ( unsigned char sec, unsigned char min, unsigned char chas ) {
  75   1                               unsigned char code mass_number [10] = {0x3f, 0x6, 0x5b, 0x4f, 0x66, 0x6d, 0x7d, 0x7, 0x7f, 0x6f}; /*a,
             -b,c,d,e,f,g   0,1,2,3,4,5,6,7,8,9*/
  76   1                               unsigned char code mass_stolb [7] = {1, 2, 4, 8, 16, 32};/* clocs katods */
  77   1      //***********************************************************;
  78   1                               unsigned char ss_dec, ss_ed, mm_dec, mm_ed, cc_dec, cc_ed;/* clocs segment */
  79   1                               unsigned char count_data_line, position_stolb;
  80   1      //***********************************************************;
  81   1                                      ss_dec = delenie(sec,ss_dec); 
  82   1                                      mm_dec = delenie(min,mm_dec);
  83   1                                      cc_dec = delenie(chas,cc_dec);
  84   1                                      ss_ed = ostatok(sec,ss_ed);
  85   1                                      mm_ed = ostatok(min,mm_ed);
  86   1                                      cc_ed = ostatok(chas,cc_ed);
  87   1      //***********************************************************;          
  88   1                                                      switch(count_data_line) { 
  89   2                                                                      case 0: 
  90   2                                                                                                       cc_dec = ~mass_number[cc_dec]; 
  91   2                                                                                                       position_stolb = mass_stolb[count_data_line]; 
  92   2                                                                                                       CS = 0; 
  93   2                                                                                                       shift_out8(position_stolb);
  94   2                                                                                                       shift_out8(cc_dec);
  95   2                                                                                                       CS = 1; 
  96   2                                                                                                       break;
  97   2                                                                      case 1: 
  98   2                                                                                                       cc_ed  = ~mass_number[cc_ed] ^ 128;
  99   2                                                                                                       position_stolb = mass_stolb[count_data_line];
 100   2                                                                                                       CS = 0;
 101   2                                                                                                       shift_out8(position_stolb);
 102   2                                                                                                       shift_out8(cc_ed);
 103   2                                                                                                       CS = 1;
 104   2                                                                                                       break;
 105   2                                                                      case 2: 
 106   2                                                                                                       mm_dec = ~mass_number[mm_dec];
 107   2                                                                                                       position_stolb = mass_stolb[count_data_line];
 108   2                                                                                                       CS = 0; 
 109   2                                                                                                       shift_out8(position_stolb); 
 110   2                                                                                                       shift_out8(mm_dec); 
 111   2                                                                                                       CS = 1;
 112   2                                                                                                       break;
 113   2                                                                      case 3:
 114   2                                                                                                       mm_ed  = ~mass_number[mm_ed] ^ 128;
 115   2                                                                                                       position_stolb = mass_stolb[count_data_line];
 116   2                                                                                                       CS = 0;
C51 COMPILER V8.05a   MATRIX                                                               04/13/2022 11:01:28 PAGE 3   

 117   2                                                                                                       shift_out8(position_stolb);
 118   2                                                                                                       shift_out8(mm_ed);
 119   2                                                                                                       CS = 1;
 120   2                                                                                                       break; 
 121   2                                                                      case 4: 
 122   2                                                                                                       ss_dec = ~mass_number[ss_dec];
 123   2                                                                                                       position_stolb = mass_stolb[count_data_line];
 124   2                                                                                                       CS = 0; 
 125   2                                                                                                       shift_out8(position_stolb);
 126   2                                                                                                       shift_out8(ss_dec);
 127   2                                                                                                       CS = 1;
 128   2                                                                                                       break;                                 
 129   2                                                                      case 5: 
 130   2                                                                                                      ss_ed  = ~mass_number[ss_ed];   
 131   2                                                                                                      position_stolb = mass_stolb[count_data_line];
 132   2                                                                                                      CS = 0;
 133   2                                                                                                      shift_out8(position_stolb);
 134   2                                                                                                      shift_out8(ss_ed);
 135   2                                                                                                      CS = 1;
 136   2                                                                                                      break;  
 137   2                                                      }
 138   1                                                                                              count_data_line++;  
 139   1                                                                                                       if(count_data_line > 5){
 140   2                                                                                                               count_data_line = 0;
 141   2                      }
 142   1      }
 143                          
 144          void chasi_hod (void){
 145   1                                       
 146   1          clock_sec++;
 147   1                                                                      
 148   1                                      if( clock_sec > 59) { clock_sec = 0;clock_min++;}             
 149   1                                      if (clock_min > 59){clock_min = 0;clock_sec = 0;clock_chas++;}
 150   1                                      if (clock_chas > 23) {clock_chas= 0;clock_min = 0;clock_sec = 0;}
 151   1                    
 152   1                              
 153   1                                                
 154   1      }
 155          
 156          //----------------------------------------------------------------------------------;   
 157          void T0isr(void) interrupt 1 using 0{
 158   1                TF0 = 0;
 159   1                count_timer0_interrupt--;
 160   1                                                      if(count_timer0_interrupt == 0){ 
 161   2                                                                      print_LED(clock_sec,clock_min ,clock_chas);
 162   2                                                                        count_timer0_interrupt = 10; 
 163   2                                      }  
 164   1      }
 165          void T1isr(void) interrupt 3 using 1{
 166   1                TF1 = 0;
 167   1                count_timer1_interrupt--;
 168   1                       
 169   1                         if(count_timer1_interrupt == 0){ 
 170   2                                                                       chasi_hod();
 171   2                                                                 count_timer1_interrupt = 10000; 
 172   2                                                                       
 173   2                                                         
 174   2                                                              }         
 175   1                                      }  
 176          
 177          //----------------------------------------------------------------------------------;   
 178          void main(void){
C51 COMPILER V8.05a   MATRIX                                                               04/13/2022 11:01:28 PAGE 4   

 179   1                count_timer0_interrupt = 10;
 180   1                count_timer1_interrupt = 10000;
 181   1                P1 |= ~0x6;
 182   1                PT1 = 1;
 183   1                PT0 = 0;
 184   1                preset_T0isr();
 185   1                preset_T1isr ();
 186   1          
 187   1                              while(1){         
 188   2                                      if(P2_0 == 0){
 189   3                                                  TR0 = 0;
 190   3                                                              clock_min++;
 191   3                                                   TR0 = 1;
 192   3                                                       }
 193   2              }
 194   1      }       


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    439    ----
   CONSTANT SIZE    =     17    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6       7
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
